$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 !! clk $end
  $var wire  1 "! rst $end
  $var wire 32 ~ y [31:0] $end
  $scope module Single_Cycle $end
   $var wire  4 F ALU_control [3:0] $end
   $var wire 32 D ALU_result [31:0] $end
   $var wire 32 C Instruction [31:0] $end
   $var wire  1 L RegWrite $end
   $var wire  3 H br_type [2:0] $end
   $var wire  1 !! clk $end
   $var wire  1 &! cs $end
   $var wire  3 I load [2:0] $end
   $var wire  4 G mask [3:0] $end
   $var wire  1 N rd_en $end
   $var wire 32 E rdata2 [31:0] $end
   $var wire 32 #! readData [31:0] $end
   $var wire  1 "! rst $end
   $var wire  1 O sel_A $end
   $var wire  1 P sel_B $end
   $var wire  2 K store [1:0] $end
   $var wire  2 J wb_sel [1:0] $end
   $var wire  1 M wr_en $end
   $var wire 32 ~ y [31:0] $end
   $scope module CU $end
    $var wire  4 F ALU_control [3:0] $end
    $var wire  7 /! AU_opcode [6:0] $end
    $var wire  7 +! B_opcode [6:0] $end
    $var wire  7 )! IL_opcode [6:0] $end
    $var wire  7 (! I_opcode [6:0] $end
    $var wire  7 -! JR_opcode [6:0] $end
    $var wire  7 ,! J_opcode [6:0] $end
    $var wire  7 '! R_opcode [6:0] $end
    $var wire  1 L RegWrite $end
    $var wire  7 *! S_opcode [6:0] $end
    $var wire  7 .! U_opcode [6:0] $end
    $var wire  3 H br_type [2:0] $end
    $var wire  7 0! func [6:0] $end
    $var wire  3 S func3 [2:0] $end
    $var wire  7 R func7 [6:0] $end
    $var wire  3 I load [2:0] $end
    $var wire  7 Q opcode [6:0] $end
    $var wire  1 N rd_en $end
    $var wire  1 O sel_A $end
    $var wire  1 P sel_B $end
    $var wire  2 K store [1:0] $end
    $var wire  2 J wb_sel [1:0] $end
    $var wire  1 M wr_en $end
   $upscope $end
   $scope module DM $end
    $var wire 32 D ALU_result [31:0] $end
    $var wire 32 # Data_Mem[0] [31:0] $end
    $var wire 32 - Data_Mem[10] [31:0] $end
    $var wire 32 . Data_Mem[11] [31:0] $end
    $var wire 32 / Data_Mem[12] [31:0] $end
    $var wire 32 0 Data_Mem[13] [31:0] $end
    $var wire 32 1 Data_Mem[14] [31:0] $end
    $var wire 32 2 Data_Mem[15] [31:0] $end
    $var wire 32 3 Data_Mem[16] [31:0] $end
    $var wire 32 4 Data_Mem[17] [31:0] $end
    $var wire 32 5 Data_Mem[18] [31:0] $end
    $var wire 32 6 Data_Mem[19] [31:0] $end
    $var wire 32 $ Data_Mem[1] [31:0] $end
    $var wire 32 7 Data_Mem[20] [31:0] $end
    $var wire 32 8 Data_Mem[21] [31:0] $end
    $var wire 32 9 Data_Mem[22] [31:0] $end
    $var wire 32 : Data_Mem[23] [31:0] $end
    $var wire 32 ; Data_Mem[24] [31:0] $end
    $var wire 32 < Data_Mem[25] [31:0] $end
    $var wire 32 = Data_Mem[26] [31:0] $end
    $var wire 32 > Data_Mem[27] [31:0] $end
    $var wire 32 ? Data_Mem[28] [31:0] $end
    $var wire 32 @ Data_Mem[29] [31:0] $end
    $var wire 32 % Data_Mem[2] [31:0] $end
    $var wire 32 A Data_Mem[30] [31:0] $end
    $var wire 32 B Data_Mem[31] [31:0] $end
    $var wire 32 & Data_Mem[3] [31:0] $end
    $var wire 32 ' Data_Mem[4] [31:0] $end
    $var wire 32 ( Data_Mem[5] [31:0] $end
    $var wire 32 ) Data_Mem[6] [31:0] $end
    $var wire 32 * Data_Mem[7] [31:0] $end
    $var wire 32 + Data_Mem[8] [31:0] $end
    $var wire 32 , Data_Mem[9] [31:0] $end
    $var wire  1 !! clk $end
    $var wire  1 &! cs $end
    $var wire  4 G mask [3:0] $end
    $var wire  1 N rd_en $end
    $var wire 32 E rdata2 [31:0] $end
    $var wire 32 #! readData [31:0] $end
    $var wire  1 M wr_en $end
   $upscope $end
   $scope module DP $end
    $var wire  4 F ALU_control [3:0] $end
    $var wire 32 D ALU_result [31:0] $end
    $var wire 32 X Immediate [31:0] $end
    $var wire 32 C Instruction [31:0] $end
    $var wire 32 T PC [31:0] $end
    $var wire 32 U PC_new [31:0] $end
    $var wire  1 L RegWrite $end
    $var wire  1 V br_taken $end
    $var wire  3 H br_type [2:0] $end
    $var wire  1 !! clk $end
    $var wire  1 &! cs $end
    $var wire  3 I load [2:0] $end
    $var wire  4 G mask [3:0] $end
    $var wire 32 %! rdata [31:0] $end
    $var wire 32 W rdata1 [31:0] $end
    $var wire 32 E rdata2 [31:0] $end
    $var wire 32 Y rdataA [31:0] $end
    $var wire 32 Z rdataB [31:0] $end
    $var wire 32 #! readData [31:0] $end
    $var wire  1 "! rst $end
    $var wire  1 O sel_A $end
    $var wire  1 P sel_B $end
    $var wire  2 K store [1:0] $end
    $var wire  2 J wb_sel [1:0] $end
    $var wire 32 $! wdata [31:0] $end
    $scope module AU $end
     $var wire  4 F ALU_control [3:0] $end
     $var wire 32 D ALU_result [31:0] $end
     $var wire 32 Y rdataA [31:0] $end
     $var wire 32 Z rdataB [31:0] $end
    $upscope $end
    $scope module BC $end
     $var wire  1 V br_taken $end
     $var wire  3 H br_type [2:0] $end
     $var wire 32 W rdata1 [31:0] $end
     $var wire 32 E rdata2 [31:0] $end
    $upscope $end
    $scope module IG $end
     $var wire 32 X Immediate [31:0] $end
     $var wire 32 C Instruction [31:0] $end
    $upscope $end
    $scope module IM $end
     $var wire 32 C Instruction [31:0] $end
     $var wire 32 T PC [31:0] $end
    $upscope $end
    $scope module LSU $end
     $var wire 32 D ALU_result [31:0] $end
     $var wire  1 &! cs $end
     $var wire  3 I load [2:0] $end
     $var wire  4 G mask [3:0] $end
     $var wire 32 %! rdata [31:0] $end
     $var wire 32 #! readData [31:0] $end
     $var wire  2 K store [1:0] $end
    $upscope $end
    $scope module RF $end
     $var wire  1 L RegWrite $end
     $var wire 32 ^ Reg_Mem[0] [31:0] $end
     $var wire 32 h Reg_Mem[10] [31:0] $end
     $var wire 32 i Reg_Mem[11] [31:0] $end
     $var wire 32 j Reg_Mem[12] [31:0] $end
     $var wire 32 k Reg_Mem[13] [31:0] $end
     $var wire 32 l Reg_Mem[14] [31:0] $end
     $var wire 32 m Reg_Mem[15] [31:0] $end
     $var wire 32 n Reg_Mem[16] [31:0] $end
     $var wire 32 o Reg_Mem[17] [31:0] $end
     $var wire 32 p Reg_Mem[18] [31:0] $end
     $var wire 32 q Reg_Mem[19] [31:0] $end
     $var wire 32 _ Reg_Mem[1] [31:0] $end
     $var wire 32 r Reg_Mem[20] [31:0] $end
     $var wire 32 s Reg_Mem[21] [31:0] $end
     $var wire 32 t Reg_Mem[22] [31:0] $end
     $var wire 32 u Reg_Mem[23] [31:0] $end
     $var wire 32 v Reg_Mem[24] [31:0] $end
     $var wire 32 w Reg_Mem[25] [31:0] $end
     $var wire 32 x Reg_Mem[26] [31:0] $end
     $var wire 32 y Reg_Mem[27] [31:0] $end
     $var wire 32 z Reg_Mem[28] [31:0] $end
     $var wire 32 { Reg_Mem[29] [31:0] $end
     $var wire 32 ` Reg_Mem[2] [31:0] $end
     $var wire 32 | Reg_Mem[30] [31:0] $end
     $var wire 32 } Reg_Mem[31] [31:0] $end
     $var wire 32 a Reg_Mem[3] [31:0] $end
     $var wire 32 b Reg_Mem[4] [31:0] $end
     $var wire 32 c Reg_Mem[5] [31:0] $end
     $var wire 32 d Reg_Mem[6] [31:0] $end
     $var wire 32 e Reg_Mem[7] [31:0] $end
     $var wire 32 f Reg_Mem[8] [31:0] $end
     $var wire 32 g Reg_Mem[9] [31:0] $end
     $var wire  1 !! clk $end
     $var wire  5 [ raddr1 [4:0] $end
     $var wire  5 \ raddr2 [4:0] $end
     $var wire 32 W rdata1 [31:0] $end
     $var wire 32 E rdata2 [31:0] $end
     $var wire  1 "! rst $end
     $var wire  5 ] waddr [4:0] $end
     $var wire 32 $! wdata [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000011000100000001010010011 C
b00000000000000000000000000000111 D
b00000000000000000000000000000000 E
b0000 F
b1000 G
b110 H
b000 I
b01 J
b00 K
1L
1M
0N
0O
1P
b0010011 Q
b0000000 R
b000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000100 U
0V
b00000000000000000000000000000001 W
b00000000000000000000000000000110 X
b00000000000000000000000000000001 Y
b00000000000000000000000000000110 Z
b00100 [
b00110 \
b00101 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000011 `
b00000000000000000000000000000010 a
b00000000000000000000000000000001 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
1!!
0"!
b00000000000000000000000000000000 #!
b00000000000000000000000000000111 $!
b00000000000000000000000000000000 %!
0&!
b0110011 '!
b0010011 (!
b0000011 )!
b0100011 *!
b1100011 +!
b1101111 ,!
b1100111 -!
b0110111 .!
b0010111 /!
b0100000 0!
#1
0!!
#2
b00000000001100100110001110010011 C
b00000000000000000000000000000011 D
b00000000000000000000000000000010 E
b1000 F
b110 S
b00000000000000000000000000000100 T
b00000000000000000000000000001000 U
b00000000000000000000000000000011 X
b00000000000000000000000000000011 Z
b00011 \
b00111 ]
b00000000000000000000000000000111 c
1!!
b00000000000000000000000000000011 $!
#3
0!!
#4
b01000000001100010000010000110011 C
b00000000000000000000000000000001 D
b0001 F
b0010 G
0P
b0110011 Q
b0100000 R
b000 S
b00000000000000000000000000001000 T
b00000000000000000000000000001100 U
b00000000000000000000000000000011 W
b00000000000000000000000000000000 X
b00000000000000000000000000000011 Y
b00000000000000000000000000000010 Z
b00010 [
b01000 ]
b00000000000000000000000000000011 e
1!!
b00000000000000000000000000000001 $!
#5
0!!
#6
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b0001 G
b0000000 Q
b0000000 R
b00000000000000000000000000001100 T
b00000000000000000000000000010000 U
b00000000000000000000000000000000 W
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000 [
b00000 \
b00000 ]
b00000000000000000000000000000001 f
1!!
b00000000000000000000000000000000 $!
#7
0!!
#8
b00000000000000000000000000010000 T
b00000000000000000000000000010100 U
1!!
#9
0!!
#10
b00000000000000000000000000010100 T
b00000000000000000000000000011000 U
1!!
#11
0!!
#12
b00000000000000000000000000011000 T
b00000000000000000000000000011100 U
1!!
#13
0!!
#14
b00000000000000000000000000011100 T
b00000000000000000000000000100000 U
1!!
#15
0!!
#16
b00000000000000000000000000100000 T
b00000000000000000000000000100100 U
1!!
#17
0!!
#18
b00000000000000000000000000100100 T
b00000000000000000000000000101000 U
1!!
#19
0!!
